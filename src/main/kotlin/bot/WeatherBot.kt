package bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.*
import com.github.kotlintelegrambot.entities.ChatAction
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import data.remote.API_KEY
import data.remote.repository.WeatherRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.util.logging.Filter

private const val GIF_WAITING_URL = "https://gifer.com/ru/1LBN"
private const val BOT_ANSWER_TIMEOUT = 30
private const val BOT_TOKEN = "6982007963:AAFygXrpS9aq2ezgLBmAkq_NMhiRzmHqbfg"

class WeatherBot(private val weatherRepository: WeatherRepository) {
private lateinit var country:String
    private  var _chatId:ChatId? = null
    private  val chatId by lazy {  requireNotNull((_chatId))}

fun createBot():Bot{
return bot {
timeout = BOT_ANSWER_TIMEOUT
    token = BOT_TOKEN

    dispatch {
        setUpCommands()
        setUpCallbacks()
    }
}
}

    private fun Dispatcher.setUpCallbacks() {
callbackQuery(callbackData = "getMyLocation ") {
    bot.sendMessage(chatId = chatId, text = "–í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–≤–æ—î –≥–µ–æ–ø–æ–ª–æ–∂–µ–Ω–Ω—è")
    location {
        CoroutineScope(Dispatchers.IO).launch {
          val userCounty =  weatherRepository.getReverseCountryName(
              location.latitude.toString(),location.longitude.toString(),
                "json").countryName

            country = userCounty
            val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ",
                        callbackData = "yes_label"
                    )
                )
            )
            callbackQuery (callbackData = "enterManually"){
                bot.sendMessage(chatId = chatId, text = "–î–æ–±—Ä–µ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ")
                message(com.github.kotlintelegrambot.extensions.filters.Filter.Text){

                    country = message.text.toString()
                    val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                        listOf(
                            InlineKeyboardButton.CallbackData(
                                text = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ",
                                callbackData = "yes_label"
                            )
                        )
                    )
                }
            }
            bot.sendMessage(
                chatId = chatId,
                text = "–¢–≤–æ—ç –º—ñ—Å—Ç–æ - ${country}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ? \n –Ø–∫—â–æ –Ω–µ –≤—ñ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ —â–µ —Ä–∞–∑",
                replyMarkup = inlineKeyboardMarkup
            )
        }
    }
    callbackQuery(callbackData = "yes_label"){
        bot.apply {
            sendAnimation(chatId = chatId, animation = TelegramFile.ByUrl(GIF_WAITING_URL))
            sendMessage(chatId=chatId, text = "–î—ñ–∑–Ω–∞—î–º–æ—Å—è –ø–æ–≥–æ–¥—É . . . ")
            sendChatAction(chatId=chatId, action = ChatAction.TYPING)
        }
        CoroutineScope(Dispatchers.IO).launch {
           val currentWeather = weatherRepository.getCurrentWeather(
                apiKey = API_KEY,
               country,
                 "no"
            )
            bot.sendMessage(chatId= chatId,
                text = """
                            ‚òÅ –•–º–∞—Ä–Ω—ñ—Å—Ç—å: ${currentWeather.clouds}
                            üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:: ${currentWeather.main.temp}
                            üôé –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫:: ${currentWeather.main.feels_like}
                            üíß –í–æ–ª–æ–≥–∞: ${currentWeather.main.humidity}
                            üå™ –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: ${currentWeather.wind.speed}
                            üß≠ –¢–∏—Å–∫: ${currentWeather.main.pressure}
                                         
                """.trimIndent()
            )
            bot.sendMessage(
                chatId = chatId,
                text = "–Ø–∫—â–æ –í–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –ø–æ–≥–æ–¥—É —â–µ —Ä–∞–∑, \n –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather"
            )
            country = ""
        }
    }
}

    }

    private fun Dispatcher.setUpCommands() {
command("start"){
    _chatId = ChatId.fromId(message.chat.id)
 bot.sendMessage(
     chatId = chatId,
     text = "–ü—Ä–∏–≤—ñ—Ç! –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –§–æ—Ä–µ—Å—Ç. –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —à–≤–∏–¥–∫–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ" +
             " \n–î–ª—è —Å—Ç–∞—Ä—Ç—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /weather"
 )
}

        command("weather"){
            val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–í–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ—î –º—ñ—Å—Ç–æ ( –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏–ª–∞–¥—ñ–≤ )",
                        callbackData = "getMyLocation"
                    )
                ),
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = " –ù–∞–ø–∏—Å–∞—Ç–∏ –º—ñ—Å—Ç–æ —Å–∞–º–∏–º",
                        callbackData = "enterManually"
                )
            )
            )
            bot.sendMessage(
                chatId = chatId,
                text = "–î–ª—è —Ç–æ–≥–æ, —â–æ–± —è –¥—ñ–∑–Ω–∞–≤—Å—è –ø–æ–≥–æ–¥—É, \n –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ —Ç–≤–æ—î –º—ñ—Å—Ç–æ.",
                replyMarkup = inlineKeyboardMarkup
            )
        }
    }
}